from flask import render_template, request, url_for, redirect
from pickle import load
from app import app
import shutil
import os

def dataload(pkl, dic):
    ''' Load data from container. Update dictionary '''
    try:
        with open(pkl, 'rb') as f:
            var = load(f)
    except FileNotFoundError:
        var = {}
    return {**dic, **var}

@app.route('/', methods=['GET', 'POST'])
def galway():

    if request.method == 'POST':
        if 'Renville'  in request.form:
            return redirect(url_for('dashboard', site='Renville'))
        elif 'Ballinacourty'  in request.form:
            return redirect(url_for('dashboard', site='Ballinacourty'))
        elif 'Blackweir'  in request.form:
            return redirect(url_for('dashboard', site='Blackweir'))
        elif 'Cave'  in request.form:
            return redirect(url_for('dashboard', site='Cave'))
        elif 'Killeenaran'  in request.form:
            return redirect(url_for('dashboard', site='Killeenaran'))
        elif 'Tarrea'  in request.form:
            return redirect(url_for('dashboard', site='Tarrea'))
        elif 'Kinvara'  in request.form:
            return redirect(url_for('dashboard', site='Kinvara'))
        elif 'Crushoa'  in request.form:
            return redirect(url_for('dashboard', site='Crushoa'))
        elif 'Parkmore'  in request.form:
            return redirect(url_for('dashboard', site='Parkmore'))
        elif 'Traught'  in request.form:
            return redirect(url_for('dashboard', site='Traught'))
        elif 'Newtownlynch'  in request.form:
            return redirect(url_for('dashboard', site='Newtownlynch'))
        elif 'New-Quay'  in request.form:
            return redirect(url_for('dashboard', site='New-Quay'))
        elif 'Flaggy-Shore'  in request.form:
            return redirect(url_for('dashboard', site='Flaggy-Shore'))
        elif 'Bellharbour'  in request.form:
            return redirect(url_for('dashboard', site='Bellharbour'))
        elif 'Bishops-Quarter'  in request.form:
            return redirect(url_for('dashboard', site='Bishop_s-Quarter'))
        elif 'Ballyvaughan'  in request.form:
            return redirect(url_for('dashboard', site='Ballyvaughan'))
        elif 'Gleninagh' in request.form:
            return redirect(url_for('dashboard', site='Gleninagh'))
    else:
        return render_template('home.html', latitude=53.2, longitude=-9.1)

''' Galway Bay Dashboard '''
@app.route('/Galway-Bay/<site>/')
def dashboard(site):
    data = dataload(f'/data/pkl/Galway-Bay/{site}.pkl', {})
    data = dataload(f'/data/BIRDS/{site}-WEB.pkl', data)
    return render_template('galway-dashboard.html', **data)

''' Galway Bay eBird '''
@app.route('/eBird')
def form():
    ''' Process bird requests from Leaflet map '''

    # Get longitude of request 
    longitude = request.args.get('longitude', type=float)
    # Get latitude of request
    latitude = request.args.get('latitude', type=float)
    # Get corresponding site name (Renville, Kinvara, etc.)
    site = request.args.get('site')
    # Get formatted site name for archive file name
    # as generated by the back-end bird container.
    filename = site.replace("'", "_").replace(" ", "-") 

    root = '/data/BIRDS/'
    with open(f'{root}{filename}-WEB.pkl', 'rb') as f:
        data = load(f) # Load eBird observations

    # Get coordinates of sightings
    lon, lat = data.get('lonBird'), data.get('latBird')
    # Convert strings to numbers
    lon = [float(i) for i in lon]
    lat = [float(i) for i in lat]
    # Get times and sites of observations
    t, loc = data.get('t'), data.get('loc')
    # Get species names, both common and scientific
    cm, sc = data.get('cm'), data.get('sc')
    # Get image files and paths
    pic = data.get('pic')
    # Get title
    title = data.get('title')

    where, common, species, picture, when = [], [], [], [], []
    # Keep only those observations matching the clicked marker
    for i, j, T, Com, Sci, Pic, Loc in zip(lon, lat, t, cm, sc, pic, loc):
        if ( abs(i - longitude) < 1e-8 ) and (abs(j - latitude) < 1e-8):
            where.append(Loc)
            common.append(Com)
            species.append(Sci)
            picture.append(Pic)
            when.append(T)

    # Move bird pictures to static folder
    imdir = '/app/app/static/BIRDS/'
    if not os.path.isdir(imdir):
        os.makedirs(imdir)

    for pic in picture:
        name = os.path.basename(pic)
        if not os.path.isfile(f'{imdir}{name}'):
            shutil.copy2(pic, imdir)

    im = []
    for pic in picture:
        folder = os.path.dirname(pic)
        im.append(pic.replace(folder, '../static/BIRDS'))

    return render_template("form.html", 
            longitude=longitude, latitude=latitude,
            site=site, title=title,
            entries=zip(where, common, species, im, when))
